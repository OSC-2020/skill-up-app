import 'package:cloud_firestore/cloud_firestore.dart';

typedef FirestoreTransaction(Transaction transaction);

class FirebaseFirestoreUtils {
  // region Collection Methods
  static CollectionReference getCollectionRef(String path) {
    assert(path != null);
    return FirebaseFirestore.instance.collection(path);
  }

  // endregion Collection Methods

  //  region Doc Methods
  static Future getDocById(CollectionReference ref, String docID) {
    assert(ref != null);
    return ref.doc(docID).get();
  }

  static Future deleteDoc(CollectionReference ref, String docID) {
    assert(ref != null);
    assert(ref != null);
    return ref.doc(docID).delete();
  }

  // region Add/Update
  static Future addDocWithAutoGeneratedIdToCollection(
      CollectionReference ref, dynamic data) {
    assert(ref != null);
    return ref.add(data).catchError((err) => print(
        'Failed to add data: ${data.toString()}\n For collection: ${ref.path}'));
  }

  static Future addDocWithNamedIdToCollection(
      CollectionReference ref, String docID, dynamic data) {
    assert(ref != null);
    assert(docID != null);
    return ref.doc(docID).set(data).catchError((err) => print(
        'Failed to add data: ${data.toString()} \nWith ID: $docID \n For collection: ${ref.path}'));
  }

  static Future updateDocument(
      CollectionReference ref, String docID, dynamic data) {
    assert(ref != null);
    assert(docID != null);
    return ref.doc(docID).update(data).catchError((err) => print(
        'Failed to update data: ${data.toString()} \nWith ID: $docID \n For collection: ${ref.path}'));
  }

// endregion Add/Update
// endregion Doc Methods

  static runInTransaction(FirestoreTransaction methodToRun) async {
    assert(methodToRun != null);
    try {
      await FirebaseFirestore.instance
          .runTransaction((transaction) => methodToRun(transaction));
      print('Transaction success');
    } catch (e) {
      print('Transaction failure:$e');
    }
  }
}
